import cv2
import numpy as np
import os
from typing import List

def track(video_path):
    '''
    Tracks an object in a video using the Lucas-Kanade algorithm.

    Args:
        video_path (str): Path to the video file.
    '''
    # Initialize the video capture
    cap = cv2.VideoCapture(video_path)

    # Initialize the Lucas-Kanade parameters
    lk_params = dict(winSize=(15, 15),
                     maxLevel=4,
                     criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))

    # Get the first frame and select the object to track
    ret, frame = cap.read()
    bbox = cv2.selectROI('Select Object to Track', frame, fromCenter=False)

    # Initialize the object tracker
    tracker = cv2.TrackerKCF_create()
    tracker.init(frame, bbox)

    while True:
        # Read a frame from the video
        ret, frame = cap.read()
        if not ret:
            break

        # Update the object tracker
        success, bbox = tracker.update(frame)

        # Draw the tracked object
        if success:
            x, y, w, h = [int(v) for v in bbox]
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

        # Display the frame
        cv2.imshow('Object Tracking', frame)

        # Exit if 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    videos: List[str] = []
    for path in os.listdir("./assets"):
        if path.endswith(".mp4"):
            video_path = os.path.join("./assets", path)
            videos.append(video_path)

    videos = sorted(videos)
    for video in videos:
        try:
            track(video)
        except Exception as e:
            print(f"Error tracking object in {video}: {e}")
